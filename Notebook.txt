Engineering Notebook for MEC++ (MyEasyC++ pronounced "mek plus plus")

September 7, 2015

    I first came up with the idea of this language yesterday (on September 6, 2015). Just for fun, I was reading some articles about
how C++ was so bad and why it should not be taught as a beginners language. I personally don't mind all of the subtleties of C++.
C++ is like an animal (sorry C++): if you can tame it, then it is a powerful beast under your control; if you can't, then too bad.
    I had always liked making programming languages that improved on an already existing programming language. I had made Py++,
a "better" version of Python, that I had entered in the Synopsys Science Fair (and won an award for!); I had been working on
StampHacker, a modern version of the old PBASIC programming language used in the BASIC Stamp microcontroller. Some time during
the early development of the parser, I stopped working on it. It was already a complex web of code (as hand-written parsers
usually are). Writing a full parser would have taken months, maybe even a year. Instead, I decided to take the code that made
the infrastructure of the compiler and fashion it into a framework for writing compilers. Hence, I had made The Compiler Framework.
I like to give software utterly obvious names.
    I started rewriting StampHacker, naming it MyEasyPBASIC, except using this new framework. This was how I tested the framework. Anyway, that night
that I was reading articles on my iPad it struck me: why don't I make a better C++? It would be cleaner, eliminate all of the
simplicities, and I decided that it would compile to C++ for compatibility with already-existing C++ code. I named it MyEasyC++
after the other compiler I was writing.


I found this C++ code online here: https://en.wikipedia.org/wiki/Trabb_Pardo%E2%80%93Knuth_algorithm#C.2B.2B_implementation

It is a C++ implementation of the Trabb Pardo - Knuth algorithm. The algorithm is defined by the website I cited as this:

    ask for 11 numbers to be read into a sequence S
    reverse sequence S
    for each item in sequence S
        call a function to do an operation
        if result overflows
            alert user
        else
            print result

I don't have any ideas about what my language is going to look like yet, other than the use of reference counting for garbage
collection and that there will be no reference variables like in C++. I am going to rewrite the C++ code and modify it to make it simpler and more
modern. Hopefully, it will give me some ideas about what my language should look like.

C++ Code:

NotebookCPP1.cpp

#include <algorithm>
#include <cmath>
#include <iostream>

double f(int n) { // in C++14, return type can be inferred using "auto f(int n)"
    return sqrt(abs(n)) + 5*n*n*n;
}

int main() {
    const int N = 11; // in C++11, can be declared as "constexpr auto N = 11;"
    int S[N];         // in C++11, can be declared as "std::array<int, N> S;"

    for(int i = 0; i < N; ++i) {
        std::cin >> S[i];
    }

    std::reverse(S, S+N); // in C++11, can be used as "std::reverse(begin(S), end(S));"

    for( int i = 0; i < N; ++i) { // in C++11, can be used as "for(auto i : S)"
        double y = f(S[i]);
        if (y > 400) {
            std::cout << i << " TOO LARGE\n";
        }
        else {
            std::cout << y << '\n';
        }
    }
}

MyEasyC++ Code:

NotebookMEC1.mec

@use {
    algorithm,
    cmath,
    iostream
}

to f(n: Int) -> Double: # in C++14, return type can be inferred using "auto f(int n)"
    return sqrt(abs(n)) + 5*n^3
/to

start
    set N: Int to 11 # in C++11, can be declared as "constexpr auto N = 11;"
    create S: int[N]         # in C++11, can be declared as "std::array<int, N> S;"

    for i: Int from 0 -> N:
        std.input --> S[i]
    /for


    std.reverse(S, S+N); # in C++11, can be used as "std::reverse(begin(S), end(S));"

    for i: Int from 0 -> N: # in C++11, can be used as "for(auto i : S)"
        let y: Double = f(S[i])
        if y > 400:
            std.output <-- i <-- " TOO LARGE<newline>"
        else:
            std.output <-- y <-- '<newline>'
        /if
    /for
end

You may have noticed that I used C++ libraries in this code. You can use either C++ libraries or libraries from the custom API
I plan to write for this language.

Let's look at the changes:

Instead of braces, I used : and /xxx to start and end blocks, as I was planning to do in StampHacker. In fact,
this code borrows heavily from my previous programming languages.

It also borrows from Swift (see the var: Type and the func(args) -> return).

I replaced the main method with start and end.

For namespace scope resolution, I just used the dot operator. It took me a while to decide between

std.reverse,
std/reverse, and
std:reverse.

There would be too many /'s in bigger programs, and the std.reverse just looked better than std:reverse.

There are some other changes as well. I used the @ for directives (@use {...}). Instead of using the << and >> operators,
I used <-- and -->.


This code still looks pretty ugly to me. There are just so many symbols! I want the code to be structured in the same way as
a C++ program, but with a lot less boilerplate and clutter. Let me rewrite it again:

NotebookMEC2.mec

@use {
    algorithm,
    cmath,
    iostream
}

to f(<int n>) -> double:       # in C++14, return type can be inferred using "auto f(int n)"
    return sqrt(abs(n)) + 5*n^3
/to

set <int n> to 11              # in C++11, can be declared as "constexpr auto N = 11;"
create <Int[] of 10 s>         # in C++11, can be declared as "std::array<int, N> S;"

for <int i> from 0 -> n:
    std.input --> s[i]
/for

std.reverse(s, s + n)          # in C++11, can be used as "std::reverse(begin(S), end(S));"

for <int i> from 0 -> n:       # in C++11, can be used as "for(auto i : S)"
    let <double y> = f(s[i])
    if y > 400:
        std.output <-- i <-- " TOO LARGE<newline>"
    else:
        std.output <-- y <-- '<newline>'
    /if
/for

Here, I also formatted the code properly. The comments were only a few spaces after the line of code and it was
making the code look very messy.

The main change is that I changed variable declarations from var: Type to <type var>, as I did in Py++.

I think I can make this a little better.

NotebookMEC3.mec

@use:
    algorithm
    cmath
    iostream

to f(n : int) -> double:       # in C++14, return type can be inferred using "auto f(int n)"
    return sqrt(abs(n)) + 5*n^3

set n : int to 11              # in C++11, can be declared as "constexpr auto N = 11;"
create s : Int[] of n          # in C++11, can be declared as "std::array<int, N> S;"

for i : int from 0 -> n:
    std.input --> s[i]

std.reverse(s, s + n)          # in C++11, can be used as "std::reverse(begin(S), end(S));"

for i : int from 0 -> n:       # in C++11, can be used as "for(auto i : S)"
    y : double = f(s[i])
    if y > 400:
        std.output <-- i <-- " TOO LARGE<newline>"
    else:
        std.output <-- y <-- '<newline>'

Here, I again changed the variable declaration from <type name> to name : type. I like this; I got it from UnityScript.

Notice how the code no longer has /xxx to end blocks. It is indentation based, like Python.

I'm going to keep on refining the code.

NotebookMEC4.mec

@use:
    algorithm
    cmath
    iostream


func f(n : int) returns double:       # in C++14, return type can be inferred using "auto f(int n)"
    return sqrt(abs(n)) + 5*n^3

start

    set n to 11                    # in C++11, can be declared as "constexpr auto N = 11;"
    create s : Int[] of n          # in C++11, can be declared as "std::array<int, N> S;"

    for i from 0 -> n:
        std.input --> s[i]

    std.reverse(s, s + n)          # in C++11, can be used as "std::reverse(begin(S), end(S));"

    for i from 0 -> n:       # in C++11, can be used as "for(auto i : S)"
        y = f(s[i])
        if y > 400:
            std.output <-- i <-- " TOO LARGE<newline>"
        else:
            std.output <-- y <-- '<newline>'

end

I guess that somewhere along the line, I forgot about start/end.

I changed the function declaration from "to name(args) -> type" to "func name(args) returns type".

Now I am not just going to copy and paste the code anymore. I am actually going to rewrite the whole thing with the syntax that I
have decided and I am going to see for myself how easy this code is.

I'll paste the algorithm here as a reminder of what I am supposed to do:

    ask for 11 numbers to be read into a sequence S
    reverse sequence S
    for each item in sequence S
        call a function to do an operation
        if result overflows
            alert user
        else
            print result

@use:
    iostream
    math

func f(n : int) returns double:
    return sqrt(5 * n^3)

start

    N : constant = 11

    s : Int[] of N

    for i in s:
        std.input --> s[i]

    std.reverse(s)

    for i in s:
        if i > 400:
            std.output <-- "Too large!"
        else:
            std.output <-- i

end

After some googling (http://stackoverflow.com/questions/4854248/why-are-bitwise-shifts-and-used-for-cout-and-cin),
I decided that instead of changing the bit shift operators << and >> to <-- and -->, the latter two would be new
operators: insertion operators.

So I didn't follow the exact syntax. However, I like not having keywords to declare variables

Here's the syntax I have so far in Backus-Naur Form (I don't follow strict BNF; I use some regexes):

<statement> ::= <var-decl> |
                <if-stmt> |
                <for-stmt>

<var-decl> ::= "create " <identifier>

             | <identifier> ":" <type>

             | <identifier> ":" <type> "=" <value>


<if-stmt> ::= "if " <boolean-value> ":" <statement>+ ("orif " <boolean-exp> ":" <indented-statement>+)* ("else" ":" <statement>+)?

<for-stmt> ::= "for " <identifier> " from " <numeric-value> " to " <numeric-value> ":" <indented-statement>+
             | "for " <identifier> " in " (<string-value> | <list-value>) ":" <indented-statement>+

<numeric-value> ::= "(" <numeric-value> ")"

          | <op-prefix> <value>

          | <numeric-value> <op-postfix>

          | <numeric-value> <op_binary> <numeric-value>

          | <numeric-value> "if " <boolean-value> <numeric-value> ("orif " <boolean-value> <numeric-value>)* "else " <numeric-value>

Of course, this is a rough sketch that is not finished.

I am debating what to do with preprocessor directives. Preprocessors are a relic of the past; but this language has to resemble
C++. My goal is that after learning this language, beginners can easily shift to C++. Knowledge of preprocessor directives
is a necessary skill in C++, and my language will have to integrate them to truly be an easy C++.

I think I will need to have preprocessor directives. I could do something like this in my compiler:

Read token
If token is preprocessor directive:
    Execute it

For example,

Read token
If token is macro:
    Expand it.
    While there are macros in the expression:
        Expand them

Continue compiling the source code

This would eliminate the need for a preprocessor.

I don't think I will do this. I will just use a normal preprocessor.

After reading this: http://stackoverflow.com/questions/14041453/why-are-preprocessor-macros-evil-and-what-are-the-alternatives,
I will need to make macros a little bit more robust in MyEasyC++.

1) I will have the option to flag certain macros to display the expanded form on the console. This can be used
during debugging.

2) All arguments to macros will implicitly be placed in parenthesis unless they are literalized. Also, all macros themselves
will implicitly be placed in parenthesis unless they are literalized.

3) Macros will belong to scopes unless they are literalized

In order for macros to belong to scopes, I will need to implement the "expand-during-compile-time" system I mentioned earlier.

I will also check the syntax of the expanded macro.

Literalized:

(of a macro's argument) Placed between vertical bars (|...|). This will copy and paste the argument into the macro
without parenthesis. Use with caution.

(of a macro) Placed between vertical bars (|...|). This will not place the macro between parenthesis. It
will also make the compiler not check the syntax of the macro. Useful for defining macros that do not act like functions
and are intended solely to paste some code somewhere. Use with caution.

Take this example:

@macro hello(x) x * 2

This is implicitly read as

@macro hello(x) ((x) * 2)

Using literalization,

@macro hello(|x|) |x * 2|

There are no implicit parenthesis inserted.

This could be useful if you want to do something like this:

@macro write |std.output <--|
@macro done|;|

write "Hello" done

(This is just an example; there is no reason why you would actually want to do this)

If you did not literalize the macro, then you should get a syntax error for not having anything to the right of the <--
insertion operator.

I call these macros "Safe Macros".

(One of the advantages of writing a programming language is that you get to make up terms like "safe macros" and
"literalization" :) )

Also, to solve the problem of includes making programs larger, I have proposed this solution:

When you compile a file, two files are generated: a C++ file and a .mecnames file. The .mecnames file contains an intermediate
form of the program. To use another file in your program, you can @include it...or you can @import a .mec file. When
you @import, the file is not pasted into the code; but now, if there is a name in the code that was not declared in the
file, the program will then search the .mecnames file for it. In essence, you add a new namespace of values (though not in
the strict definition of a C++ namespace).

The .mecnames file could just be a serialized SyntaxTree. It could also be a serialized key-value list of the names and their
values.

Take this example:

# NotebookMECHeader.mec

var = 2

# NotebookMECSource.mec

# @include NotebookMECHeader.mec    --- Case 1
# @import NotebookMECHeader.mecnames --- Case 2

@use iostream

std.output <-- var

While I was writing the program, I realized that I already defined the @use directive. I have decided that @use will be
for C++ files and @include will be for MEC++ files.

In case 1, NotebookMECHeader.mec is pasted into the source file. In case 2, it is not pasted but it is added as another directory
where the program will search for names. Now when it sees the line std.output <-- var, it will not find var declared in
NotebookMECSource.mec so it will then go to NotebookMECHeader.mec, find that it was declared there, and use that value.
Note that the value of var should be its latest value (if it changes in NotebookMECHeader.mec, then the program should use
the updated value of var instead of the original).

Actually, I think that helper files (I am calling header files in MEC++ helper files) should have their own file extension.
.mecnames files should only be generated for files with that header. I think I will go with .mechelper Helper files should
have no executable code in them (that way, the value of var is never changed). Any executable code has to go in a function or
class or some structure where it is not immediately run. Source files can have executable code; name files (.mecnames) will
not be generated for them.

