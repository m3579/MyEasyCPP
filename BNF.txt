---------STATEMENTS

<endchar> ::= "\n" | ";" | "\0"

<statement> ::= <var-decl>
              | <member-decl>
              | <declare-stmt>
              | <if-stmt>
              | <for-loop>
              | <foreach-loop>
              | <while-loop>
              | <function>
              | <class>

                <endchar>

<indented-statement> ::= <indent-whitespace> <statement>

<indent-whitespace> ::= (" " || "\t")+

    (where the amount of whitespace is greater than before the line that starts the block)

<block-stmts> ::= ":" <statement>
                  | ":" "\n" <indented-statement>+

---------VARIABLES

<var-decl> ::= "init " (<class-name> | <struct-name>) <identifier> "(" (value ("," value))? ")"

             | <identifier> ":" <type>

             | <identifier> ":" <type> "=" <value>

<member-decl> ::= <access-mod>? <identifier> ":" <type>

<declare-stmt> ::= "declare " <identifier> ":" <type>
                 | "declare " <identifier> "(" ( (<identifier> ":")? <type> ("," (<identifier> ":")? <type>)* )? ")"

---------CONTROL

<if-stmt> ::= "if " <boolean-value> <block-stmts>
              ("orif " <boolean-value> <block-stmts>)*
              ("else" <block-stmts>)?

<for-loop> ::= "for " <identifier> ":" <type> " from " <numeric-value> " to " <numeric-value> <block-stmts>
             | "for " <identifier> ":" <type> " in " (<string-value> | <list-value>) <block-stmts>

<foreach-loop> ::= "for " <identifier> ":" <type> " in " <identifier> <block-stmts>

<while-loop> ::= "while " <boolean-value> <block-stmts>

<function> ::= "func " <identifier> "(" ( (<identifier> ":")? <type> ("," (<identifier> ":")? <type>)* )? ")" "->" <type> <block-stmts>

<class-declaration> ::= "class " <identifier> ("is_a" <superclass>) <block-stmts>

    (where <superclass> is the superclass of the object)

---------VALUES

NUMBERS:
    <numeric-value> ::= "(" <numeric-value> ")"
                      | <numeric-expression>
                      | <number-literal>
                      | <numeric-variable>

        (where <numeric-variable> is a variable of a numeric type)

    <number-literal> ::= [0-9] [0-9]*

    <numeric-expression> ::= <numeric-value> <binary-arithmetic-operator> <numeric-value>
                           | <unary-prefix-arithmetic-operator> <numeric-value>
                           | <numeric-value> <unary-postfix-arithmetic-operator>

    <unary-prefix-arithmetic-operator> ::= "++" | "--"

    <unary-postfix-arithmetic-operator> ::= "++" | "--"

    <binary-arithmetic-operator> ::= "+" | "-" | "*" | "/" | "%" | "^"

BOOLEANS:
    <boolean-value> ::= <boolean-literal>
                      | <boolean-expression>
                      | <boolean-variable>

        (where <boolean-variable> is a variable of a boolean type)

    <boolean-literal> ::= "true" | "false"

    <boolean-expression> ::= <unary-boolean-prefix-operator> <boolean-value>
                           | <boolean-value> <binary-boolean-operator> <boolean-value>

    <unary-boolean-prefix-operator> ::= "not"

    <binary-boolean-operator> ::= "and" | "or"

STRINGS:
    <string-value> ::= "\"" <any characters>* ( (?<!"\\") "\"")
                     | <string-variable>

        (where <string-variable> is a variable of a string type)

MEMORY:
    <pointer> ::= "Pointer" ":" <type>
                | "WeakPointer" ":" <type>
                | "StrongPointer" ":" <type>
                | <pointer-variable>

        (where <memory-variable> is a variable of a pointer type)

    <reference> ::= "Ref" ":" <type>
                  | <reference-variable>

        (where <reference-variable> is a variable of type reference)

    <memory-value> ::= <pointer> | <reference>

FUNCTIONS/METHODS:
    <call> ::= <identifier> "(" ( <identifier ("," <identifier>)* )? ")"

<value> ::= <numeric-value>
          | <boolean-value>
          | <memory-value>
          | <call>

---------MISCELLANOUS

<object-member-access> ::= <object-variable> "." <member>
                         | <object-pointer-variable> "->" <member>

    (where <object-variable> is a variable of an object type
     where <object-pointer-variable> is a pointer to an object
     where <member> is either a property of the object or a <call> on a method in the object with the appropriate arguments)

<access-mod> ::= "visible" | "hidden" | "inherited"

