Note: there may be some features from the Engineering Notebook that I forgot to add in here.

Where <type> is a valid data type (primitive type, object, struct, enum, etc.)

(When I say "where <identifier> is a valid xxx name", I mean that the xxx exists,
something else does not already have its name, etc.)

---------STATEMENTS

<endchar> ::= "\n" | ";" | "\0"

<statement> ::= <start>
              | <end>
              | <var-stmt>
              | <if-stmt>
              | <for-loop>
              | <while-loop>
              | <loop-control-stmt>
              | <function>
              | <return-stmt>
              | <class>
              | <class-stmt>
              | <namespace>
              | <use-stmt>
              | <directive>
              | <comment>
              | <placeholder>

              | ""

                <comment>?

                <endchar>

<comment> ::= "#" <any-character-except-newline>*
              | "#=" <any-character>* "=#"

<ppd-conditional> ::= <if-dir> |
                      <ifdef> | <ifndef>

                      <ppd-start-char> <endif-dir>

<preprocessor-directive> ::= <ppd-start-char>
                              <macro>
                            | <error>
                            | <ppd-conditional>
                            | <access>
                            | <use-cpp>
                            | <setline>
                            | <undef>

                             <endchar>

<start> ::= "start"

<end> ::= "end"

<class-stmts> ::= ( <indent-whitespace>  ( <member-stmt>
                                         | <method>
                                         | "\n" )*

    (where the class is abstract if the keyword "abstract" comes before <function>)

<indented-statement> ::= <indent-whitespace> <statement>

<indent-whitespace> ::= (" " || "\t")+

    (where the amount of whitespace is greater than before the line that starts the block)

<var-stmt> ::= <var-decl-only> | <var-decl-assign>

<member-stmt> ::= <member-decl-only> | <member-decl-assign>

<block-stmts> ::= ":" <statement>
                  | ":" "\n" <indented-statement>+

<namespace> ::= "namespace" <identifier> <block-stmts>

    (where <identifier> is a valid namespace name)

<use-stmt> ::= "use" <namespace> ("." <member>)*

    (where <namespace> is a valid namespace,
     where <member> is a valid member in that namespace or in the previous member)

<placeholder> ::= "skip"

<ppd-start-char> ::= "-"

---------VARIABLES

<identifier> ::= ("@")? [A-Za-z_$] [A-Za-z_0-9]*

    (where the "@" sign is only present if the identifier is a member,
     where the $ sign is present if and only if the identifier belongs to the C++ STL
     or some other C++ code that the C+2 source code is referencing)

---------DECLARATIONS

<var-stmt> ::= ("set")?
                <identifier> ":" (("Copying" ":") | ("Function" ":"))? (<class-name> | <struct-name>) "(" (value ("," value))? ")" ("{" (<value> ("," <value>)*)? "}")?
                | (<identifier> (":" <type>)?) | (<identifier> ":" <type> "[" "]" "of" <positive-integer>)?

                ("=" <value>)?

    (where <identifier> is a valid variable name,
     where <value> is of type <type>,
     where <positive-integer> is a positive integer,
     where the clause enclosed in braces contains the values that the container (if the variable is a container) will be initialized with)

<member-stmt> ::= ("set")?
                 <access-mod>?
                 "static"?

                <identifier> ":" ("Copying" ":")? <class-name> | <struct-name>) "(" (value ("," value))? ")" ("{" (<value> ("," <value>)*)? "}")?
                | (<identifier> (":" <type>)?) | (<identifier> ":" <type> "[" "]" "of" <positive-integer>)?)

                ("=" <value>)?

    (where <identifier> is a valid member name,
     where <value> is of type <type>,
     where <positive-integer> is a positive integer,
     where the clause enclosed in braces contains the values that the container (if the variable is a container) will be initialized with,
     where the terms in the first parenthesized clause can come in any order)


<func-decl-contents> ::= = "func " <identifier> ("<" <type> ("," <type>)* ">")? "(" ( (<identifier> ":")? <type> ("," (<identifier> ":")? <type>)* )? ")" ("->" <type>)?

    (where <identifier> is a valid function name)

<func-decl-only> ::= <func-decl-contents>

<function> ::= <func-decl-contents> (<block-stmts>)?

<method> ::= "*" ("override"? <access-mod>? "static"?) <function>
             | ("declare") <access-mod>? <func-decl-contents>)

    (where "override" is only there if the method overrides one in the superclass,
     where the terms in the first parenthesized clause can come in any order)

---------CONTROL

<if-stmt> ::= "if " <boolean-value> <block-stmts>
              ("orif " <boolean-value> <block-stmts>)*
              ("else" <block-stmts>)?

<for-loop> ::= "for " <identifier> ":" <type> " from " <numeric-value> "->" <numeric-value> <block-stmts>
             | "for " <identifier> (":" <type> " in ")? (<string-value> | <list-value>) <block-stmts>

    (where <list-value> is a valid variable of a list type)

<while-loop> ::= "while " <boolean-value> <block-stmts>

<loop-control-stmt> ::= "break" | "continue"

<return-stmt> ::= "return" <value>

    (where <value> is of the return type of the function)

<class-declaration> ::= ("generic")? "class " <identifier> (("is_a" | "is_an") <access-mod>? <superclass>) <class-stmts>

    (where <superclass> is the superclass of the object,
     where <identifier> is a valid class name)

---------VALUES

NUMBERS:
    <numeric-value> ::= "(" <numeric-value> ")"
                      | <numeric-expression>
                      | <number-literal>
                      | <numeric-variable>

        (where <numeric-variable> is a variable of a numeric type)

    <number-literal> ::= ("-")? [0-9]+ ("."? [0-9]+)

    <numeric-expression> ::= <numeric-value> <binary-arithmetic-operator> <numeric-value>
                           | <unary-prefix-arithmetic-operator> <numeric-value>
                           | <numeric-value> <unary-postfix-arithmetic-operator>

    <unary-prefix-arithmetic-operator> ::= "++" | "--"

    <unary-postfix-arithmetic-operator> ::= "++" | "--"

    <binary-arithmetic-operator> ::= "+" | "-" | "*" | "/" | "%" | "^" |
                                     ">" | "<" | ">=" | "<=" |
                                     "+=" | "-=" | "*=" | "/=" | "%=" | "^="

BOOLEANS:
    <boolean-value> ::= <boolean-literal>
                      | <boolean-expression>
                      | <boolean-variable>

        (where <boolean-variable> is a variable of a boolean type)

    <boolean-literal> ::= "true" | "false"

    <boolean-expression> ::= <unary-boolean-prefix-operator> <boolean-value>
                           | <boolean-value> <binary-boolean-operator> <boolean-value>

    <unary-boolean-prefix-operator> ::= "not"

    <binary-boolean-operator> ::= "and" | "or"

STRINGS:
    <string-value> ::= "\"" <any-characters>* ( (?<!"\\") "\"")
                     | <string-variable>

        (where <string-variable> is a variable of a string type)

MEMORY:
    <pointer> ::= "Pointer" ":" <type>
                | "WeakVar" ":" <type>
                | <pointer-variable>

        (where <pointer-variable> is a variable of a pointer type)

    <reference> ::= "Ref" ":" <type>
                  | <reference-variable>

        (where <reference-variable> is a variable of type reference)

    <memory-value> ::= <pointer> | <reference>

FUNCTIONS/METHODS:
    <call> ::= <identifier> ("<" <type> ("," <type>)* ">")? "(" ( <identifier ("," <identifier>)* )? ")"

VALUES:
<value> ::= <numeric-value>
          | <boolean-value>
          | <memory-value>
          | <string-value>
          | <call>

          | <value> <binary-value-operator> <value>

          ("as" <type>)?

    (where <positive-integer> is a positive integer,
     where <type> is a valid type that you can cast the value to)

<binary-value-operator> ::= "is" | "!="

---------PREPROCESSOR DIRECTIVES

(where <filename> is a valid filename on user's operating system)

<macro> ::= "Macro" ":" <identifier>
            "(" (("|" <identifier> "|") | <identifier>) ("," ("|" <identifier> "|") | <identifier>))*)? ")"
            "="
            ( ("|" <any-characters> "|") | <value>) )

    (where <identifier> is a valid macro name)

<error> ::= "Raise" ":" <value>

<if-dir> ::= "If" <boolean-value> <block-stmts>
             (<ppd-start-char> "Orif" <boolean-value> <block-stmts>)*
             (<ppd-start-char> "Else" <block-stmts>)?
             <endif-ppd>

<ifdef> ::= "IfDefined" <identifier> <block-stmts>

<ifndef> ::= "IfNotDefined" <identifier> <block-stmts>

<endif-dir> ::= "EndIf"

<undef> ::= "Undefine" ":" <identifier>

<access> ::= "Access" ":" ("\n")?  (<filename> (("." <member>)*)?) ("\n" (<filename> (("." <member>)*)?))*

<use-cpp> ::= "CPP" ":" ("\n")? (<filename> (("." <member>)*)?) ("\n" (<filename> (("." <member>)*)?))*

<setline> ::= "Line" ":" <numeric-value> "andFilename" ":" (<filename>)

---------MISCELLANEOUS

<object-member-access> ::= <object-variable> "." <member>

    (where <object-variable> is a variable of an object type or a pointer to a variable of am object type
     where <member> is either a property of the object or a <call> on a method in the object with the appropriate arguments)

<access-mod> ::= "visible" | "hidden" | "inherited"

