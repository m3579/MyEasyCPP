So I was thinking for some syntaxes for the weak/strong reference system.

@use vector

declare class Item

class Container:

    create items : std.vector<StrongPointer:Item>


class Item:

    create container : WeakPointer:Container


I think this looks good.

This is what the syntax looks like now. I've added some more rules:

<endchar> ::= "\n" | ";" | "\0"

<statement> ::= <var-decl> |
                <if-stmt> |
                <for-loop> |
                <foreach-loop> |
                <while-loop>

                <endchar>

<indented-statement> ::= <indent-whitespace> <statement>

<indent-whitespace> ::= " " || "\t"

<block-stmts> ::= ":" <statement>
                  | ":" "\n" <indented-statement>+

<var-decl> ::= "create " <identifier>

             | "init " (<class-name> | <struct-name>) <identifier> "(" (value ("," value))? ")"

             | <identifier> ":" <type>

             | <identifier> ":" <type> "=" <value>


<if-stmt> ::= "if " <boolean-value> <block-stmts>
              ("orif " <boolean-value> <block-stmts>)*
              ("else" <block-stmts>)?

<for-loop> ::= "for " <identifier> ":" <type> " from " <numeric-value> " to " <numeric-value> <block-stmts>
             | "for " <identifier> ":" <type> " in " (<string-value> | <list-value>) <block-stmts>

<foreach-loop> ::= "for " <identifier> ":" <type> " in " <identifier> <block-stmts>

<while-loop> ::= "while " <boolean-value> <block-stmts>

<numeric-value> ::= "(" <numeric-value> ")"

          | <op-prefix> <numeric-value>

          | <numeric-value> <op-postfix>

          | <numeric-value> <op_binary> <numeric-value>

          | <numeric-value> "if " <boolean-value> <numeric-value> ("orif " <boolean-value> <numeric-value>)* "else " <numeric-value>

<pointer> ::= "Pointer" ":" <type>
            | "WeakPointer" ":" <type>
            | "StrongPointer" ":" <type>

<boolean-value> ::= "true" | "false"

<value> ::= <numeric-value>
          | <boolean-value>
          | <pointer>


I think it's time I rewrite another C++ program in my new language. I think I will choose a more complicated one this
time.

This is a smart pointer class I made in TheCompilerFramework. I based the code off of

http://www.codeproject.com/Articles/15351/Implementing-a-simple-smart-pointer-in-c

// Ref.h

#ifndef REF_H_INCLUDED
#define REF_H_INCLUDED

namespace smartPointer
{
	template <typename T>
	class Ref
	{
		public:
			Ref(T* t) :
				ptr(t), rc(0)
			{
				rc++;
			}

			Ref(const Ref<T>& r)
			{
				ptr = r.ptr;
				rc = r.rc;

				rc++;
			}

			~Ref()
			{
				if (--rc == 0) {
					delete ptr;
				}
			}

			T& operator*()
			{
				return *ptr;
			}

			T* operator->()
			{
				return ptr;
			}

            Ref<T>& operator=(Ref<T>& r)
			{
				if (&r != this) {

					if (--rc == 0) {
						delete ptr;
                    }

					ptr = r.ptr;
					rc = r.rc;

					rc++;
				}

				return *this;
			}

			T* getInnerPointer()
			{
				return ptr;
			}

			T getValue()
			{
				return *ptr;
			}

            int getReferenceCount()
			{
				return rc;
			}

		protected:
			T* ptr;
			int rc;
	};

} /* namespace smartPointers */


#endif // REF_H_INCLUDED


# Ref.<extension>

guard: REF_H

namespace smartPointer:

    class Ref<T>:

        create ptr : Pointer:T

        func Create(t : Pointer:T) with ptr(t), rc(0):

            rc++

        func Copy(r : constant Ref:Ref<T>)

            ptr = r.ptr
            rc = r.rc

            rc++

        func Destroy():

            if --rc == 0:

                delete ptr

        operator * () -> Ref:T:

I stopped because I realized that this is a bad example. My language does not have a delete keyword, and I figured that
reference variables should be used with Ref:<type>, so the name of the class conflicts.

In fact, let me update the syntax. I think I will need to create a new file where I will have the latest version of the
BNF.

<endchar> ::= "\n" | ";" | "\0"

<statement> ::= <var-decl> |
                <if-stmt> |
                <for-loop> |
                <foreach-loop> |
                <while-loop>

                <endchar>

<indented-statement> ::= <indent-whitespace> <statement>

<indent-whitespace> ::= " " || "\t"

<block-stmts> ::= ":" <statement>
                  | ":" "\n" <indented-statement>+

<var-decl> ::= "create " <identifier>

             | "init " (<class-name> | <struct-name>) <identifier> "(" (value ("," value))? ")"

             | <identifier> ":" <type>

             | <identifier> ":" <type> "=" <value>


<if-stmt> ::= "if " <boolean-value> <block-stmts>
              ("orif " <boolean-value> <block-stmts>)*
              ("else" <block-stmts>)?

<for-loop> ::= "for " <identifier> ":" <type> " from " <numeric-value> " to " <numeric-value> <block-stmts>
             | "for " <identifier> ":" <type> " in " (<string-value> | <list-value>) <block-stmts>

<foreach-loop> ::= "for " <identifier> ":" <type> " in " <identifier> <block-stmts>

<while-loop> ::= "while " <boolean-value> <block-stmts>

<numeric-value> ::= "(" <numeric-value> ")"

          | <op-prefix> <numeric-value>

          | <numeric-value> <op-postfix>

          | <numeric-value> <op_binary> <numeric-value>

          | <numeric-value> "if " <boolean-value> <numeric-value> ("orif " <boolean-value> <numeric-value>)* "else " <numeric-value>

<pointer> ::= "Pointer" ":" <type>
            | "WeakPointer" ":" <type>
            | "StrongPointer" ":" <type>

<reference> ::= "Ref" ":" <type>

<memory-value> ::= <pointer> | <reference>

<boolean-value> ::= "true" | "false"

<value> ::= <numeric-value>
          | <boolean-value>
          | <memory-value>


I am thinking about other names for this language than MEC++. That just sounds weird.

The main name I am thinking about is C+2. File extensions will be cp2.

I have decided that classes will be in their own files. However, you will not need to name the class in the file;
the filename should be in the class. Classes will have an extension cp2class.

# Dog.cp2class

# doSomething is a method of Dog
func doSomething() -> nothing:
    2 + 2

As for inheritance:

Dog$Animal.cp2class


No...I don't think I will do this.

I need a way to separate interface from implementation.


# Dog.cp2h

class Dog:

    func doSomething() -> void

# Dog.cp2s

class Dog :

    func doSomething() -> void:
        # do something

That works.

This is better:

# Dog.cp2h

interface Dog:

    func doSomething() -> void

# Dog.cp2s

implementation Dog :

    func doSomething() -> void:
        # do something


Time to rewrite a BIG C++ program in C+2.

(I like that name. It sounds nice.)

I got this code from here: http://www.cplusplus.com/forum/lounge/13042/

It is supposed to:

    "Quite a while back (almost a year) someone posted a homework assignment where the goal was to have
    the user enter an integer N, and then output all possible sets of integers i1, i2, ... in such that i1 < i2 < ... < in
    and i1 + i2 + ... + in = N. Some folks provided solutions that were in excess of 40 lines of code to compute and output the
    result sets.

    Here's mine (for N=10):"

#include <iostream>
#include <string>
#include <boost/lexical_cast.hpp>

void Run( const std::string& v, int tgt, int start ) {
    for( ; tgt >= 2 * start + 1; ++start )
        Run( v + ' ' + boost::lexical_cast<std::string>( start ), tgt - start, start + 1 );
    std::cout << v << ' ' << tgt << std::endl;
}

int main() {
    Run( std::string(), 10, 1 );
    getchar();
}

@use:
    iostream
    string
    boost/lexical_cast.hpp

func Run(v : const Ref:std.string, tgt : int, start : int):

    repeat with; while tgt >= 2 * start + 1; do ++start:

        Run(v + ' ' + boost.lexical_cast<std.string>(start), tgt - start, start + 1)

    std.cout <-- v <-- ' ' <-- tgt <-- std.endl

start:
    Run((init std.string), 10, 1)
    getchar()
end

You can see I made a few changes. I changed constant to const, made a new type of loop, and used the init statement within an
expression. Now let me try to make this better:


@use:
    iostream
    string
    boost/lexical_cast.hpp

func Run(v : const Ref:std.string, tgt : int, start : int):

    repeat while(tgt >= 2 * start + 1) do (++start):

        Run(v + ' ' + boost.lexical_cast<std.string>(start), tgt - start, start + 1)

    std.output <-- v <-- ' ' <-- tgt <-- std.endline

program:
    Run((init std.string), 10, 1)
    getchar()

I changed the start/end to program. I also forgot in the previous code that std.cout was std.output, and I changed
std.endl to std.endline. I also modified the repeat loop.

I also realized that I forgot to specify a return type for this function. I think that in that case, the compiler should assume
that it is a void function.

Let me try writing a program now.

@use iostream

func addTwoNumbers(num : int, num2 : int) -> int:
    return num + num2

program:
    std.output <-- addTwoNumbers(1, 2) <-- "\n"

OK, that wasn't too painful.
